<?xml version="1.0" encoding="ISO-8859-1"?>

<!---------------------------------------------------------------->
<!-- interface for SIM was written by Yakupov M & Sukharev S -->
<!---------------------------------------------------------------->

<!DOCTYPE admst SYSTEM "admst.dtd">
<admst version="2.2.9" xmlns:admst="http://mot-adms.sourceforge.net/xml-files/admst">

  <admst:open file="%(/basefilename)_load.cpp">
    <admst:text format="/* ---------------------------------\n"/>
    <admst:text format="   created automatically. Do not change!\n"/>
    <admst:text format="   Interface: %(/simulator/package_string)\n"/>
    <admst:text format="   created by: %(/simulator/fullname) - %(/simulator/currentdate)"/>
    <admst:text format="   ---------------------------------*/\n"/>
    <admst:for-each select="/module">
#include "%(name).h"
    </admst:for-each>
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include &lt;algorithm&gt;

using namespace std;

#define countof(x) (sizeof(x) / sizeof((x)[0]))
#define begof(x) (&amp;(x)[0])
#define endof(x) (begof(x) + countof(x))

extern "C" void GetModelInfo(CKiparisMods *pKipMods, CPtrArr* pModArr)
{
  <admst:for-each select="/module">
    <admst:value-of select="name"/>
    <admst:value-of select="name"/>
    <admst:value-of select="name"/>
  C%sModelInfo *p%sModInfo = new C%sModelInfo(pKipMods);
    <admst:value-of select="name"/>
  pModArr->Add(p%sModInfo);
  </admst:for-each>
}

extern "C" void ClearModelInfo(CKiparisMods * /*pKipMods*/, CPtrArr *pModArr)
{
  for(int i=0; i &lt; pModArr->GetSize(); ++i)
    delete (CTypeModelInfo*) pModArr->GetAt(i);
  pModArr->RemoveAll();
}

#ifdef KIPARIS_AUTO_BUILD
extern "C" int GetModuleVersion()
{
  const char date[] = __DATE__;
  char month[4]; strncpy(month, date, 3); month[3] = '\\0';
  const char months[][4] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
  const int month_count = sizeof(months)/sizeof(months[0]);

  int iMonth = 0;
  for( ; iMonth &lt; month_count; ++iMonth)
    if(!strcmp(months[iMonth], month))
      break;
//  printf("date: \%s \\nmonth: \%s\\nimonth: %02d\\n", date, month, iMonth+1);
  sprintf(month, "%02d", iMonth+1);
  char stamp[16];
  char day[3];
  strncpy(stamp, date+7, 4);
  stamp[4] = '\\0';
  
  strncpy(day, date+4, 2);
  day[2] = '\\0';
  if(day[0] == ' ') day[0] = '0';
  
  strcat (stamp, month);
  strcat (stamp, day);

  stamp[8] = '\\0';
//  printf("date \%s\\n", date);
//  printf("stamp \%s\\n", stamp);
//  printf("month \%s\\n", month);
//  printf("day \%s\\n", day);
  return atoi(stamp);
}

extern "C" time_t GetModuleVersion2()
{
  string date = __DATE__;
  string time = __TIME__; 

  string month = date.substr(0,3);
  static string months   [] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
  size_t iMonth = find(begof(months), endof(months), month) - begof(months);

  string mday = date.substr(4,2);
  string year = date.substr(7,4);

  string h = time.substr(0,2);
  string m = time.substr(3,2);
  string s = time.substr(6,2);

  struct tm timestamp;
  timestamp.tm_sec  = atoi(s.c_str());
  timestamp.tm_min  = atoi(m.c_str());
  timestamp.tm_hour = atoi(h.c_str());
  timestamp.tm_mday = atoi(mday.c_str());
  timestamp.tm_mon  = iMonth;
  timestamp.tm_year = atoi(year.c_str()) - 1900;
  timestamp.tm_isdst = 0;

  time_t stamp = mktime(&amp;timestamp);
  return stamp;
}
#endif
\n
  </admst:open>

  <admst:message format="%(/basefilename)_load.cpp: file created\n"/>

</admst>

