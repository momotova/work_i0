<?xml version="1.0" encoding="ISO-8859-1"?>

<!---------------------------------------------------------------->
<!-- interface for SIM was written by Yakupov M & Sukharev S -->
<!---------------------------------------------------------------->

<!DOCTYPE admst SYSTEM "admst.dtd">
<admst version="2.2.9" xmlns:admst="http://mot-adms.sourceforge.net/xml-files/admst">

<admst:template match="code_clean">
  <admst:value-of select="name"/>
  <admst:variable name="module" select="%s"/>

clean_$(module) :
	-@\$(rm) $(module).\$(OBJ_EXT)         2>nul 1>nul
#	-@\$(rm) $(module).cpp                 2>nul 1>nul
#	-@\$(rm) $(module).h                   2>nul 1>nul
#	-@\$(rm) $(module)AnalogFunctions.cpp  2>nul 1>nul
</admst:template>

<admst:template match="code">
  <admst:value-of select="name"/>
  <admst:variable name="module" select="%s"/>

$(module).\$(OBJ_EXT) :
	\$(CPP) \$(CPP_PROJ) /Fo$(module).\$(OBJ_EXT) $(module).cpp 
</admst:template>

<admst:template match="body">
  <admst:value-of select="/basefilename"/>
  <admst:variable name="fname" select="%s"/>
OBJ_EXT=obj
rm=del /f /q

LIBDIR_MOD   =\$(SPICE_MODLIB_BASE)
CPP_DEFS     =/D "WIN32" /D "_DEBUG" /D "_WINDOWS" /D "_USRDLL" /D "KIPARIS_AUTO_BUILD" /D "USE_KIP_EXP" /D "_MBCS"
CPP_PROJ     =/c /MDd /EHsc /Zi /wd4996 /I "\$(LIBDIR_MOD)" \$(CPP_DEFS) 

LINK32_FLAGS =/DLL /INCREMENTAL:NO  /machine:\$(LINKER_ARCH) /DEBUG /MANIFEST /ManifestFile:$(fname).so.manifest /PDB:$(fname).so.pdb kernel32.lib /DEF:$(fname).def

CPP=cl
LINK32=link
LINK32_COMMON_OBJS= "\$(LIBDIR_MOD)/kiparis/arrays.\$(OBJ_EXT)" "\$(LIBDIR_MOD)/kiparis/compat_str.\$(OBJ_EXT)" "\$(LIBDIR_MOD)/kiparis/kipmodels.\$(OBJ_EXT)" "\$(LIBDIR_MOD)/kiparis/kiparis_math_sse2.\$(OBJ_EXT)"
LINK32_GEN_OBJS_VAR= 
<admst:for-each select="/module">
  <admst:value-of select="name"/>
  <admst:text format="%s.\$(OBJ_EXT) "/>
</admst:for-each>
LINK32_GEN_OBJS=\$(LINK32_GEN_OBJS_VAR) $(fname)_load.\$(OBJ_EXT) $(fname)_noise.\$(OBJ_EXT)

all : $(fname).so

cleanall : clean
	-@\$(rm) $(fname).so                2>nul 1>nul
    
clean : clean_common clean_generated clean_modules
#	-@\$(rm) Makefile                   2>nul 1>nul

clean_generated :
#	-@\$(rm) $(fname)_load.cpp          2>nul 1>nul
#	-@\$(rm) $(fname)_noise.cpp         2>nul 1>nul
	-@\$(rm) $(fname)_load.\$(OBJ_EXT)  2>nul 1>nul
	-@\$(rm) $(fname)_noise.\$(OBJ_EXT) 2>nul 1>nul
	-@\$(rm) $(fname).def               2>nul 1>nul
	-@\$(rm) $(fname).lib               2>nul 1>nul
	-@\$(rm) $(fname).exp               2>nul 1>nul
	-@\$(rm) $(fname).so.manifest       2>nul 1>nul
	-@\$(rm) .$(fname).adms             2>nul 1>nul
#	-@\$(rm) $(fname).so.pdb            2>nul 1>nul
#	-@\$(rm) vc80.pdb                   2>nul 1>nul

clean_common : 
	-@\$(rm) .adms.implicit.xml         2>nul 1>nul
	-@\$(rm) disciplines.vams           2>nul 1>nul
	-@\$(rm) constants.vams             2>nul 1>nul
	-@\$(rm) discipline.h               2>nul 1>nul
	-@\$(rm) constants.h                2>nul 1>nul
	-@\$(rm) .interface.xml             2>nul 1>nul

clean_modules : 
<admst:for-each select="/module">
  <admst:value-of select="name"/>
  <admst:text format="clean_%s "/>
</admst:for-each>

<admst:for-each select="/module">
  <admst:value-of select="name"/>
  <admst:variable name="module" select="%s"/>
  <admst:apply-templates select="." match="code_clean"/>
</admst:for-each>

$(fname).so :  \$(LINK32_GEN_OBJS)
	\$(LINK32) \$(LINK32_FLAGS) \$(LINK32_GEN_OBJS) \$(LINK32_COMMON_OBJS) /OUT:$(fname).so
	mt -manifest $(fname).so.manifest -outputresource:"$(fname).so;#2"
<admst:for-each select="/module">
  <admst:value-of select="name"/>
  <admst:variable name="module" select="%s"/>
  <admst:apply-templates select="." match="code"/>
</admst:for-each>

$(fname)_load.\$(OBJ_EXT) :
	\$(CPP) \$(CPP_PROJ) /Fo$(fname)_load.\$(OBJ_EXT)  $(fname)_load.cpp

$(fname)_noise.\$(OBJ_EXT) :
	\$(CPP) \$(CPP_PROJ) /Fo$(fname)_noise.\$(OBJ_EXT) $(fname)_noise.cpp

</admst:template>

<admst:open file="./Makefile">
  <admst:apply-templates select="." match="body"/>
  <admst:message format="Makefile: file created\n"/>
</admst:open>
</admst>
